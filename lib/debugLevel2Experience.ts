import { processXpGain, getLevelProgressInfo, calculateXpToNext } from './levelSystemV2'

/**
 * –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—ã—Ç–æ–º –Ω–∞ 2 —É—Ä–æ–≤–Ω–µ
 */
export function debugLevel2Experience() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú–´ –° –û–ü–´–¢–û–ú –ù–ê 2 –£–†–û–í–ù–ï')
  console.log('=' .repeat(60))
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è 2 —É—Ä–æ–≤–Ω—è
  console.log('\nüìä –¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –£–†–û–í–ù–ï–ô:')
  console.log(`–û–ø—ã—Ç –¥–ª—è 1‚Üí2 —É—Ä–æ–≤–Ω—è: ${calculateXpToNext(1)}`)
  console.log(`–û–ø—ã—Ç –¥–ª—è 2‚Üí3 —É—Ä–æ–≤–Ω—è: ${calculateXpToNext(2)}`)
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ 2 —É—Ä–æ–≤–Ω—è —Å 0 –æ–ø—ã—Ç–∞
  let character = { level: 2, experience: 0 }
  
  console.log('\nüìä –ù–ê–ß–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï (2 —É—Ä–æ–≤–µ–Ω—å, 0 –æ–ø—ã—Ç–∞):')
  let progressInfo = getLevelProgressInfo(character)
  console.log(`–£—Ä–æ–≤–µ–Ω—å: ${progressInfo.level}`)
  console.log(`–û–ø—ã—Ç: ${progressInfo.experience}`)
  console.log(`–û–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${progressInfo.experienceToNext}`)
  console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${progressInfo.progressPercent.toFixed(1)}%`)
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —É–±–∏–π—Å—Ç–≤–æ –º–æ–±–æ–≤ –ø–æ 10 –æ–ø—ã—Ç–∞ –∫–∞–∂–¥—ã–π
  console.log('\nüéØ –£–ë–ò–ô–°–¢–í–û –ú–û–ë–û–í –ù–ê 2 –£–†–û–í–ù–ï:')
  for (let i = 1; i <= 10; i++) {
    const experienceGained = 10
    const xpResult = processXpGain(character.level, character.experience, experienceGained)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    character = {
      level: xpResult.newLevel,
      experience: xpResult.newXpProgress
    }
    
    progressInfo = getLevelProgressInfo(character)
    
    console.log(`\n–ú–æ–± ${i}: +${experienceGained} –æ–ø—ã—Ç–∞`)
    console.log(`  –£—Ä–æ–≤–µ–Ω—å: ${character.level}`)
    console.log(`  –û–ø—ã—Ç: ${character.experience}`)
    console.log(`  –û–ø—ã—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: ${progressInfo.experienceToNext}`)
    console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: ${progressInfo.progressPercent.toFixed(1)}%`)
    
    if (xpResult.levelsGained > 0) {
      console.log(`  üéâ –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø! +${xpResult.levelsGained} —É—Ä–æ–≤–µ–Ω—å(–æ–≤)`)
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
    if (xpResult.levelsGained > 0) {
      break
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º –Ω–∞ 2 —É—Ä–æ–≤–Ω–µ
  console.log('\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê 2 –£–†–û–í–ù–Ø:')
  character = { level: 2, experience: 0 }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –ø–æ 1 –µ–¥–∏–Ω–∏—Ü–µ
  for (let exp = 1; exp <= 20; exp++) {
    const xpResult = processXpGain(character.level, character.experience, 1)
    character = {
      level: xpResult.newLevel,
      experience: xpResult.newXpProgress
    }
    
    progressInfo = getLevelProgressInfo(character)
    
    if (exp % 5 === 0 || xpResult.levelsGained > 0) {
      console.log(`+${exp} –æ–ø—ã—Ç–∞: –£—Ä–æ–≤–µ–Ω—å ${character.level}, –û–ø—ã—Ç ${character.experience}, –ü—Ä–æ–≥—Ä–µ—Å—Å ${progressInfo.progressPercent.toFixed(1)}%`)
    }
    
    if (xpResult.levelsGained > 0) {
      console.log(`  üéâ –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø!`)
      break
    }
  }
  
  console.log('\n' + '=' .repeat(60))
  console.log('üèÅ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–∞–¥–∫—É –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof window === 'undefined') {
  debugLevel2Experience()
}
