import { Character } from '@/types/game'
import { Mob, FarmSpot } from '@/types/world'
import { ActiveSkill } from '@/types/skills'
import { getAvailableSkills } from './activeSkills'

export interface CombatResult {
  success: boolean
  experience: number
  gold: number
  items: any[]
  mobsDefeated: number
  totalDamage: number
  skillsUsed: string[]
  damageTaken: number
  manaUsed: number
}

export interface AutoCombatOptions {
  maxRounds: number
  usePotions: boolean
  stopOnLowHealth: boolean
  stopOnLowMana: boolean
}

export class AutoCombatSystem {
  private character: Character
  private spot: FarmSpot
  private activeSkills: string[]
  private skillCooldowns: Map<string, number>
  private options: AutoCombatOptions

  constructor(
    character: Character, 
    spot: FarmSpot, 
    activeSkills: string[], 
    options: AutoCombatOptions = {
      maxRounds: 100,
      usePotions: true,
      stopOnLowHealth: true,
      stopOnLowMana: false
    }
  ) {
    this.character = character
    this.spot = spot
    this.activeSkills = activeSkills
    this.skillCooldowns = new Map()
    this.options = options
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±–æ—è
  async executeCombat(): Promise<CombatResult> {
    const result: CombatResult = {
      success: false,
      experience: 0,
      gold: 0,
      items: [],
      mobsDefeated: 0,
      totalDamage: 0,
      skillsUsed: [],
      damageTaken: 0,
      manaUsed: 0
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–ª–ª—ã
    if (this.activeSkills.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤ –¥–ª—è –±–æ—è!')
      return result
    }

    let currentMobs = [...this.spot.mobs]
    let currentHealth = this.character.health
    let currentMana = this.character.mana
    let round = 0

    console.log(`ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ–π —Å ${currentMobs.length} –º–æ–±–∞–º–∏, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤: ${this.activeSkills.length}`)

    while (currentMobs.length > 0 && round < this.options.maxRounds) {
      round++
      console.log(`üîÑ –†–∞—É–Ω–¥ ${round}, –º–æ–±–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${currentMobs.length}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (this.shouldStopCombat(currentHealth, currentMana)) {
        console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ–π –ø–æ —É—Å–ª–æ–≤–∏—è–º')
        break
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Å–∫–∏–ª–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const skillToUse = this.selectSkill(currentMana)
      
      if (skillToUse) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∏–ª–ª
        const skillResult = this.useSkill(skillToUse, currentMobs)
        currentMobs = skillResult.remainingMobs
        currentHealth = Math.max(0, currentHealth - skillResult.damageTaken)
        currentMana = Math.max(0, currentMana - skillResult.manaUsed)
        result.totalDamage += skillResult.damageDealt
        result.damageTaken += skillResult.damageTaken
        result.manaUsed += skillResult.manaUsed
        result.skillsUsed.push(skillToUse)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω —Å–∫–∏–ª–ª–∞
        this.markSkillUsed(skillToUse)
        
        console.log(`‚öîÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∫–∏–ª–ª ${skillToUse}, —É—Ä–æ–Ω: ${skillResult.damageDealt}, –ø–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω: ${skillResult.damageTaken}, –º–∞–Ω–∞: ${skillResult.manaUsed}`)
      } else {
        // –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞
        const basicAttack = this.basicAttack(currentMobs)
        currentMobs = basicAttack.remainingMobs
        currentHealth = Math.max(0, currentHealth - basicAttack.damageTaken)
        result.totalDamage += basicAttack.damageDealt
        result.damageTaken += basicAttack.damageTaken
        
        console.log(`üëä –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞, —É—Ä–æ–Ω: ${basicAttack.damageDealt}, –ø–æ–ª—É—á–µ–Ω —É—Ä–æ–Ω: ${basicAttack.damageTaken}`)
      }

      // –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã—Ö –º–æ–±–æ–≤
      const aliveMobs = currentMobs.filter(mob => mob.health > 0)
      result.mobsDefeated += currentMobs.length - aliveMobs.length
      currentMobs = aliveMobs

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      await new Promise(resolve => setTimeout(resolve, 100))
    }

    // –ï—Å–ª–∏ –≤—Å–µ –º–æ–±—ã –ø–æ–±–µ–∂–¥–µ–Ω—ã
    if (currentMobs.length === 0) {
      result.success = true
      result.experience = this.spot.mobs.reduce((sum, mob) => sum + mob.experience_reward, 0)
      result.gold = this.spot.mobs.reduce((sum, mob) => sum + mob.gold_reward, 0)
      console.log(`‚úÖ –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! –û–ø—ã—Ç: ${result.experience}, –ó–æ–ª–æ—Ç–æ: ${result.gold}`)
    } else {
      console.log(`‚ùå –ë–æ–π –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –º–æ–±–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: ${currentMobs.length}`)
    }

    return result
  }

  // –í—ã–±–æ—Ä —Å–∫–∏–ª–ª–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  private selectSkill(currentMana: number): string | null {
    const availableSkills = this.getAvailableSkills()
    
    for (const skillId of this.activeSkills) {
      const skill = availableSkills.find(s => s.id === skillId)
      if (skill && currentMana >= skill.mana_cost && this.isSkillReady(skillId)) {
        return skillId
      }
    }
    
    return null
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∫–∏–ª–ª–∞ (–∫—É–ª–¥–∞—É–Ω)
  private isSkillReady(skillId: string): boolean {
    const skillData = this.getAvailableSkills().find(s => s.id === skillId)
    if (!skillData) return false
    
    const lastUsed = this.skillCooldowns.get(skillId) || 0
    const now = Date.now()
    const timeSinceLastUse = now - lastUsed
    
    return timeSinceLastUse >= skillData.cooldown * 1000
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É–ª–¥–∞—É–Ω–∞)
  private markSkillUsed(skillId: string): void {
    this.skillCooldowns.set(skillId, Date.now())
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤
  private getAvailableSkills(): ActiveSkill[] {
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞
    // –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –ø–æ–ª—É—á–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const name = this.character.name?.toLowerCase() || ''
    let className = 'archer' // fallback
    
    if (name.includes('–ª—É—á–Ω–∏–∫') || name.includes('archer')) className = 'archer'
    else if (name.includes('–º–∞–≥') || name.includes('mage')) className = 'mage'
    else if (name.includes('–±–µ—Ä—Å–µ—Ä–∫') || name.includes('berserker')) className = 'berserker'
    else if (name.includes('–∞—Å—Å–∞—Å–∏–Ω') || name.includes('assassin')) className = 'assassin'
    
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Å–∫–∏–ª (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑—É—á–µ–Ω–Ω—ã–π)
    // –í –±—É–¥—É—â–µ–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–∫–∏–ª–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return getAvailableSkills(className, this.character.level, [])
  }

  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫–∏–ª–ª–∞
  private useSkill(skillId: string, mobs: Mob[]): {
    remainingMobs: Mob[]
    damageDealt: number
    damageTaken: number
    manaUsed: number
  } {
    const skill = this.getAvailableSkills().find(s => s.id === skillId)
    if (!skill) {
      return { remainingMobs: mobs, damageDealt: 0, damageTaken: 0, manaUsed: 0 }
    }

    let totalDamage = 0
    let totalDamageTaken = 0
    const remainingMobs = [...mobs]

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏
    const targets = this.getTargets(skill, mobs)

    // –ê—Ç–∞–∫—É–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª—å
    for (const target of targets) {
      const damage = this.calculateDamage(skill, target)
      const mobIndex = remainingMobs.findIndex(m => m.id === target.id)
      
      if (mobIndex !== -1) {
        remainingMobs[mobIndex].health = Math.max(0, remainingMobs[mobIndex].health - damage)
        totalDamage += damage
      }
    }

    // –ú–æ–±—ã –∞—Ç–∞–∫—É—é—Ç –≤ –æ—Ç–≤–µ—Ç
    for (const mob of remainingMobs) {
      if (mob.health > 0) {
        const mobDamage = this.calculateMobDamage(mob)
        totalDamageTaken += mobDamage
        console.log(`üëπ ${mob.name} –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω: ${mobDamage} (–∞—Ç–∞–∫–∞: ${mob.attack}, –∑–∞—â–∏—Ç–∞: ${this.character.defense})`)
      }
    }

    return {
      remainingMobs,
      damageDealt: totalDamage,
      damageTaken: totalDamageTaken,
      manaUsed: skill.mana_cost
    }
  }

  // –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞
  private basicAttack(mobs: Mob[]): {
    remainingMobs: Mob[]
    damageDealt: number
    damageTaken: number
  } {
    const target = mobs[0] // –ê—Ç–∞–∫—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –º–æ–±–∞
    if (!target) {
      return { remainingMobs: mobs, damageDealt: 0, damageTaken: 0 }
    }

    const damage = this.calculateBasicDamage(target)
    const remainingMobs = [...mobs]
    const mobIndex = remainingMobs.findIndex(m => m.id === target.id)
    
    if (mobIndex !== -1) {
      remainingMobs[mobIndex].health = Math.max(0, remainingMobs[mobIndex].health - damage)
    }

    // –ú–æ–±—ã –∞—Ç–∞–∫—É—é—Ç –≤ –æ—Ç–≤–µ—Ç
    let totalDamageTaken = 0
    for (const mob of remainingMobs) {
      if (mob.health > 0) {
        const mobDamage = this.calculateMobDamage(mob)
        totalDamageTaken += mobDamage
        console.log(`üëπ ${mob.name} –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω (–±–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞): ${mobDamage} (–∞—Ç–∞–∫–∞: ${mob.attack}, –∑–∞—â–∏—Ç–∞: ${this.character.defense})`)
      }
    }

    return {
      remainingMobs,
      damageDealt: damage,
      damageTaken: totalDamageTaken
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–π –¥–ª—è –∞—Ç–∞–∫–∏
  private getTargets(skill: ActiveSkill, mobs: Mob[]): Mob[] {
    // –ï—Å–ª–∏ —Å–∫–∏–ª–ª AOE, –∞—Ç–∞–∫—É–µ–º –≤—Å–µ—Ö –º–æ–±–æ–≤
    if (skill.skill_type === 'aoe') {
      return mobs.filter(mob => mob.health > 0)
    }
    
    // –ò–Ω–∞—á–µ –∞—Ç–∞–∫—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∂–∏–≤–æ–≥–æ –º–æ–±–∞
    return mobs.filter(mob => mob.health > 0).slice(0, 1)
  }

  // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –æ—Ç —Å–∫–∏–ª–ª–∞
  private calculateDamage(skill: ActiveSkill, target: Mob): number {
    const baseDamage = skill.base_damage
    const statBonus = this.getStatBonus(skill.scaling_stat)
    const totalDamage = baseDamage + statBonus
    
    // –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã
    const finalDamage = Math.max(1, totalDamage - target.defense)
    
    console.log(`‚öîÔ∏è –°–∫–∏–ª–ª ${skill.name}: –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω ${baseDamage} + –±–æ–Ω—É—Å —Å—Ç–∞—Ç–∞ ${statBonus} = ${totalDamage}, –∏—Ç–æ–≥–æ ${Math.round(finalDamage)} (–∑–∞—â–∏—Ç–∞ –º–æ–±–∞: ${target.defense})`)
    
    return Math.round(finalDamage)
  }

  // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –æ—Ç –±–∞–∑–æ–≤–æ–π –∞—Ç–∞–∫–∏
  private calculateBasicDamage(target: Mob): number {
    const baseDamage = this.character.attack_damage
    const finalDamage = Math.max(1, baseDamage - target.defense)
    
    console.log(`üëä –ë–∞–∑–æ–≤–∞—è –∞—Ç–∞–∫–∞: —É—Ä–æ–Ω ${baseDamage}, –∏—Ç–æ–≥–æ ${Math.round(finalDamage)} (–∑–∞—â–∏—Ç–∞ –º–æ–±–∞: ${target.defense})`)
    
    return Math.round(finalDamage)
  }

  // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞ –æ—Ç –º–æ–±–∞
  private calculateMobDamage(mob: Mob): number {
    const baseDamage = mob.attack
    const finalDamage = Math.max(1, baseDamage - this.character.defense)
    
    return Math.round(finalDamage)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –æ—Ç —Å—Ç–∞—Ç–∞
  private getStatBonus(stat: string): number {
    const statValue = this.character[stat as keyof Character] as number || 0
    return Math.round(statValue * 2.0) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å –æ—Ç —Å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–∫–∏–ª–ª–æ–≤
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  private shouldStopCombat(health: number, mana: number): boolean {
    if (this.options.stopOnLowHealth && health < this.character.max_health * 0.2) {
      return true
    }
    
    if (this.options.stopOnLowMana && mana < this.character.max_mana * 0.1) {
      return true
    }
    
    return false
  }
}
