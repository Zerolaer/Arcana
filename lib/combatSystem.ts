import { Character } from '@/types/game'
import { Mob, CombatRewards, CombatLogEntry } from '@/types/world'
import { supabase } from '@/lib/supabase'
import { processXpGain } from './levelSystemV2'

// –°–∏—Å—Ç–µ–º–∞ –±–æ—è
export class CombatSystem {
  
  // –†–∞—Å—á–µ—Ç —É—Ä–æ–Ω–∞
  static calculateDamage(attacker: { attack: number; level: number }, defender: { defense: number; level: number }): number {
    const baseAttack = attacker.attack
    const defense = defender.defense
    const levelModifier = 1 + (attacker.level * 0.05) // 5% –∑–∞ —É—Ä–æ–≤–µ–Ω—å
    
    // –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—Ç—ã
    let damage = Math.max(1, Math.floor((baseAttack * levelModifier) - (defense * 0.7)))
    
    // –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±20%
    const randomFactor = 0.8 + (Math.random() * 0.4)
    damage = Math.floor(damage * randomFactor)
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä (10% —à–∞–Ω—Å, x2 —É—Ä–æ–Ω)
    const isCritical = Math.random() < 0.1
    if (isCritical) {
      damage *= 2
    }
    
    return Math.max(1, damage)
  }

  // –†–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  static calculateHitChance(attacker: { level: number }, defender: { level: number }): number {
    const levelDiff = attacker.level - defender.level
    let hitChance = 0.85 // –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å 85%
    
    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ —É—Ä–æ–≤–Ω—é (¬±2% –∑–∞ —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–Ω–∏—Ü—ã)
    hitChance += levelDiff * 0.02
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 10% –¥–æ 95%
    return Math.max(0.1, Math.min(0.95, hitChance))
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—è
  static async simulateCombat(character: Character, mob: Mob): Promise<CombatRewards | null> {
    console.log(`üó°Ô∏è –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±–æ–π: ${character.name} vs ${mob.name}`)
    
    // –ö–æ–ø–∏—Ä—É–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    let playerHealth = character.health
    let mobHealth = mob.health
    
    const combatLog: CombatLogEntry[] = []
    let turn = 0
    const maxTurns = 50 // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –±–æ—è
    
    while (playerHealth > 0 && mobHealth > 0 && turn < maxTurns) {
      turn++
      
      // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
      const playerHitChance = this.calculateHitChance(character, mob)
      if (Math.random() < playerHitChance) {
        const damage = this.calculateDamage(
          { attack: character.attack_damage, level: character.level },
          { defense: mob.defense, level: mob.level }
        )
        mobHealth -= damage
        
        combatLog.push({
          id: `player_${turn}`,
          timestamp: Date.now(),
          action: damage > (character.attack_damage * 1.8) ? 'critical' : 'attack',
          actor: 'player',
          damage,
          message: `${character.name} –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞`
        })
        
        console.log(`‚öîÔ∏è –ò–≥—Ä–æ–∫ –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞. HP –º–æ–±–∞: ${Math.max(0, mobHealth)}`)
      } else {
        combatLog.push({
          id: `player_miss_${turn}`,
          timestamp: Date.now(),
          action: 'miss',
          actor: 'player',
          message: `${character.name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è`
        })
        console.log(`‚ùå –ò–≥—Ä–æ–∫ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è`)
      }
      
      if (mobHealth <= 0) break
      
      // –•–æ–¥ –º–æ–±–∞
      const mobHitChance = this.calculateHitChance(mob, character)
      if (Math.random() < mobHitChance) {
        const damage = this.calculateDamage(
          { attack: mob.attack_damage || mob.attack, level: mob.level },
          { defense: character.defense, level: character.level }
        )
        playerHealth -= damage
        
        combatLog.push({
          id: `mob_${turn}`,
          timestamp: Date.now(),
          action: damage > ((mob.attack_damage || mob.attack) * 1.8) ? 'critical' : 'attack',
          actor: 'mob',
          damage,
          message: `${mob.name} –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞`
        })
        
        console.log(`üî• –ú–æ–± –Ω–∞–Ω–æ—Å–∏—Ç ${damage} —É—Ä–æ–Ω–∞. HP –∏–≥—Ä–æ–∫–∞: ${Math.max(0, playerHealth)}`)
      } else {
        combatLog.push({
          id: `mob_miss_${turn}`,
          timestamp: Date.now(),
          action: 'miss',
          actor: 'mob',
          message: `${mob.name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è`
        })
        console.log(`‚ùå –ú–æ–± –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è`)
      }
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const playerWon = mobHealth <= 0 && playerHealth > 0
    
    if (!playerWon) {
      console.log(`üíÄ –ò–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª –±–æ–π`)
      // –í —Å–ª—É—á–∞–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫ —Ç–µ—Ä—è–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, –Ω–æ –Ω–µ —É–º–∏—Ä–∞–µ—Ç
      await this.updatePlayerAfterDefeat(character)
      return null
    }
    
    console.log(`üèÜ –ò–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏–ª!`)
    
    // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥
    const rewards = await this.calculateRewards(character, mob)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await this.updatePlayerAfterVictory(character, rewards, playerHealth)
    
    return rewards
  }

  // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥ –∑–∞ –ø–æ–±–µ–¥—É
  static async calculateRewards(character: Character, mob: Mob): Promise<CombatRewards> {
    const levelDiff = mob.level - character.level
    const difficultyMultiplier = Math.max(0.5, 1 + (levelDiff * 0.1)) // –ë–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Å–ª–æ–∂–Ω—ã—Ö –º–æ–±–æ–≤
    
    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    let experience = Math.floor(mob.experience_reward * difficultyMultiplier)
    let gold = Math.floor(mob.gold_reward * difficultyMultiplier)
    
    // –ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤–æ–µ —É–±–∏–π—Å—Ç–≤–æ –º–æ–±–∞ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ)
    // if (isFirstKill) {
    //   experience *= 2
    //   gold *= 2
    // }
    
    // –°–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤ –Ω–∞–≥—Ä–∞–¥–∞—Ö ¬±20%
    const randomFactor = 0.8 + (Math.random() * 0.4)
    experience = Math.floor(experience * randomFactor)
    gold = Math.floor(gold * randomFactor)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    const xpResult = processXpGain(character.level, character.experience, experience)
    const levelUp = xpResult.levelsGained > 0
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–æ–±—ã—á—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const lootedItems = await this.getMobLoot(mob.id)
    
    console.log(`üéÅ –ù–∞–≥—Ä–∞–¥—ã: ${experience} –æ–ø—ã—Ç–∞, ${gold} –∑–æ–ª–æ—Ç–∞, ${lootedItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
    if (levelUp) console.log(`üéâ –ü–û–í–´–®–ï–ù–ò–ï –£–†–û–í–ù–Ø!`)
    
    return {
      experience,
      gold,
      items: lootedItems,
      level_up: levelUp
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
  static async updatePlayerAfterVictory(character: Character, rewards: CombatRewards, remainingHealth: number) {
    try {
      const newGold = character.gold + rewards.gold
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É—Ä–æ–≤–Ω–µ–π
      const xpResult = processXpGain(character.level, character.experience, rewards.experience)
      
      let updates: any = {
        experience: xpResult.newXpProgress,
        gold: newGold,
        health: Math.max(1, remainingHealth) // –ú–∏–Ω–∏–º—É–º 1 HP
      }
      
      // –ï—Å–ª–∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      if (xpResult.levelsGained > 0) {
        const newLevel = xpResult.newLevel
        const newStatPoints = character.stat_points + xpResult.totalStatPointsGained
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        const newMaxHealth = character.max_health + (20 * xpResult.levelsGained) // +20 HP –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        const newMaxMana = character.max_mana + (10 * xpResult.levelsGained) // +10 MP –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å
        
        updates = {
          ...updates,
          level: newLevel,
          experience_to_next: xpResult.xpToNext,
          stat_points: newStatPoints,
          max_health: newMaxHealth,
          max_mana: newMaxMana,
          health: newMaxHealth, // –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
          mana: newMaxMana
        }
        
        console.log(`üìà –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${newLevel} (+${xpResult.levelsGained}), –Ω–æ–≤—ã–π –º–∞–∫—Å HP: ${newMaxHealth}, –æ—á–∫–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: +${xpResult.totalStatPointsGained}`)
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error } = await (supabase as any)
        .from('characters')
        .update(updates)
        .eq('id', character.id)
      
      if (error) {
        console.error('Error updating character after victory:', error)
        throw error
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (rewards.items && rewards.items.length > 0) {
        await this.addItemsToInventory(character.id, rewards.items)
      }
      
    } catch (error) {
      console.error('Error in updatePlayerAfterVictory:', error)
      throw error
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø–æ—Ä–∞–∂–µ–Ω–∏—è
  static async updatePlayerAfterDefeat(character: Character) {
    try {
      // –ò–≥—Ä–æ–∫ —Ç–µ—Ä—è–µ—Ç 25% —Ç–µ–∫—É—â–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 1 HP
      const newHealth = Math.max(1, Math.floor(character.health * 0.75))
      
      const { error } = await (supabase as any)
        .from('characters')
        .update({ health: newHealth })
        .eq('id', character.id)
      
      if (error) {
        console.error('Error updating character after defeat:', error)
        throw error
      }
      
      console.log(`üíî –ò–≥—Ä–æ–∫ –ø–æ—Ç–µ—Ä—è–ª –∑–¥–æ—Ä–æ–≤—å–µ: ${character.health} -> ${newHealth}`)
      
    } catch (error) {
      console.error('Error in updatePlayerAfterDefeat:', error)
      throw error
    }
  }


  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—Ç–∞ –º–æ–±–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  static async getMobLoot(mobId: string): Promise<any[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ª—É—Ç-—Ç–∞–±–ª–∏—Ü—É –º–æ–±–∞ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã —Å —à–∞–Ω—Å–æ–º –¥—Ä–æ–ø–∞
      const { data, error } = await (supabase as any)
        .from('mob_loot')
        .select(`
          drop_rate,
          quantity_min,
          quantity_max,
          item:items_new (
            id,
            name,
            icon,
            grade_id
          )
        `)
        .eq('mob_id', mobId)
      
      if (error) {
        console.error('Error fetching mob loot:', error)
        return []
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —à–∞–Ω—Å—É –¥—Ä–æ–ø–∞
      const lootedItems = []
      for (const loot of data || []) {
        if (Math.random() * 100 < (loot as any).drop_rate) {
          const quantity = Math.floor(Math.random() * ((loot as any).quantity_max - (loot as any).quantity_min + 1)) + (loot as any).quantity_min
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (50-100%)
          const quality = 50 + Math.random() * 50
          
          lootedItems.push({
            item_id: (loot as any).item.id,
            item_name: (loot as any).item.name,
            item_icon: (loot as any).item.icon,
            quantity: quantity,
            quality: Math.round(quality * 100) / 100 // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
          })
        }
      }
      
      console.log(`üé≤ –í—ã–ø–∞–ª–æ ${lootedItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ ${data?.length || 0} –≤–æ–∑–º–æ–∂–Ω—ã—Ö`)
      return lootedItems
      
    } catch (error) {
      console.error('Error in getMobLoot:', error)
      return []
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
  static async addItemsToInventory(characterId: string, items: any[]) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      const { data: inventory, error: inventoryError } = await (supabase as any)
        .from('character_inventory')
        .select('slot_position')
        .eq('character_id', characterId)
        .order('slot_position')
      
      if (inventoryError) throw inventoryError
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
      const occupiedSlots = new Set(inventory?.map((item: any) => item.slot_position) || [])
      const freeSlots = []
      
      for (let i = 1; i <= 100; i++) { // 100 —Å–ª–æ—Ç–æ–≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        if (!occupiedSlots.has(i)) {
          freeSlots.push(i)
        }
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
      for (let i = 0; i < items.length && i < freeSlots.length; i++) {
        const item = items[i]
        
        const { error: insertError } = await (supabase as any)
          .from('character_inventory')
          .insert({
            character_id: characterId,
            item_id: item.item_id,
            slot_position: freeSlots[i],
            stack_size: item.quantity,
            quality: item.quality
          })
        
        if (insertError) {
          console.error('Error adding item to inventory:', insertError)
        } else {
          console.log(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: ${item.item_name} (${item.item_icon}) x${item.quantity} [–ö–∞—á–µ—Å—Ç–≤–æ: ${item.quality}%]`)
        }
      }
      
      if (items.length > freeSlots.length) {
        console.warn(`‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∏–ª–æ –º–µ—Å—Ç–∞ –¥–ª—è ${items.length - freeSlots.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
      }
      
    } catch (error) {
      console.error('Error in addItemsToInventory:', error)
    }
  }
}
