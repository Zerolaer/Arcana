import { Character } from '@/types/game'
import { calculateCharacterStats } from './characterStats'
import { calculateCombatPower } from './combatPower'

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–≤—è–∑—å –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∞—Ç–æ–≤ —Å –±–æ–µ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
 */

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ —Å—Ç–∞—Ç–∞–º–∏
const testCharacter: Character = {
  id: 'test-id',
  player_id: 'test-player',
  name: 'Test Character',
  class_id: 'test-class',
  level: 10,
  experience: 1000,
  experience_to_next: 2000,
  
  // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—ã (–∫–æ—Ç–æ—Ä—ã–µ –≤–∫–∞—á–∏–≤–∞–µ–º)
  agility: 20,
  precision: 15,
  evasion: 10,
  intelligence: 25,
  spell_power: 30,
  resistance: 12,
  strength: 35,
  endurance: 18,
  armor: 22,
  stealth: 8,
  
  // –û—á–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  stat_points: 5,
  
  // –†–µ—Å—É—Ä—Å—ã (–±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã)
  health: 100,
  max_health: 100,
  mana: 50,
  max_mana: 50,
  
  // –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã)
  attack_damage: 0,
  magic_damage: 0,
  defense: 0,
  magic_resistance: 0,
  critical_chance: 0,
  critical_damage: 0,
  attack_speed: 0,
  accuracy: 0,
  dodge_chance: 0,
  stealth_bonus: 0,
  
  // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞)
  health_regen: 0,
  mana_regen: 0,
  
  // –≠–∫–æ–Ω–æ–º–∏–∫–∞
  gold: 1000,
  
  // –õ–æ–∫–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç—É—Å
  current_location_id: 'test-location',
  is_in_combat: false,
  is_afk_farming: false,
  
  // –í—Ä–µ–º—è
  created_at: new Date().toISOString(),
  updated_at: new Date().toISOString(),
  last_activity: new Date().toISOString(),
  is_online: true
}

export function testStatsConnection() {
  console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–í–Ø–ó–ò –°–¢–ê–¢–û–í')
  console.log('=====================================')
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const calculatedStats = calculateCharacterStats(testCharacter)
  
  console.log('üìä –ë–ê–ó–û–í–´–ï –°–¢–ê–¢–´ (–∫–æ—Ç–æ—Ä—ã–µ –≤–∫–∞—á–∏–≤–∞–µ–º):')
  console.log(`  üèÉ Agility: ${testCharacter.agility}`)
  console.log(`  üéØ Precision: ${testCharacter.precision}`)
  console.log(`  üí® Evasion: ${testCharacter.evasion}`)
  console.log(`  üß† Intelligence: ${testCharacter.intelligence}`)
  console.log(`  ‚ö° Spell Power: ${testCharacter.spell_power}`)
  console.log(`  üõ°Ô∏è Resistance: ${testCharacter.resistance}`)
  console.log(`  üí™ Strength: ${testCharacter.strength}`)
  console.log(`  ‚ù§Ô∏è Endurance: ${testCharacter.endurance}`)
  console.log(`  üõ°Ô∏è Armor: ${testCharacter.armor}`)
  console.log(`  ü•∑ Stealth: ${testCharacter.stealth}`)
  
  console.log('\n‚öîÔ∏è –ë–û–ï–í–´–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ):')
  console.log(`  üí• Attack Damage: ${calculatedStats.attack_damage}`)
  console.log(`  üî• Magic Damage: ${calculatedStats.magic_damage}`)
  console.log(`  üõ°Ô∏è Defense: ${calculatedStats.defense}`)
  console.log(`  üßô Magic Resistance: ${calculatedStats.magic_resistance}`)
  console.log(`  ‚ö° Critical Chance: ${calculatedStats.critical_chance.toFixed(2)}%`)
  console.log(`  üí• Critical Damage: ${calculatedStats.critical_damage.toFixed(2)}%`)
  console.log(`  üèÉ Attack Speed: ${calculatedStats.attack_speed.toFixed(2)}%`)
  console.log(`  üéØ Accuracy: ${calculatedStats.accuracy.toFixed(2)}%`)
  console.log(`  üí® Dodge Chance: ${calculatedStats.dodge_chance.toFixed(2)}%`)
  console.log(`  ü•∑ Stealth Bonus: ${calculatedStats.stealth_bonus.toFixed(2)}`)
  
  console.log('\nüíö –†–ï–°–£–†–°–´:')
  console.log(`  ‚ù§Ô∏è Max Health: ${calculatedStats.max_health}`)
  console.log(`  üíô Max Mana: ${calculatedStats.max_mana}`)
  
  console.log('\nüîÑ –†–ï–ì–ï–ù–ï–†–ê–¶–ò–Ø:')
  console.log(`  ‚ù§Ô∏è Health Regen: ${calculatedStats.health_regen.toFixed(2)}/—Å–µ–∫`)
  console.log(`  üíô Mana Regen: ${calculatedStats.mana_regen.toFixed(2)}/—Å–µ–∫`)
  
  console.log('\n‚öîÔ∏è –ë–û–ï–í–ê–Ø –ú–û–©–¨:')
  const combatStats = calculateCombatPower(testCharacter)
  console.log(`  üí• Combat Power: ${combatStats.combatPower}`)
  console.log(`  ‚ù§Ô∏è Effective HP: ${combatStats.effectiveHP}`)
  console.log(`  ‚öîÔ∏è Effective DPS: ${combatStats.effectiveDPS}`)
  console.log(`  üéØ Total Damage: ${combatStats.totalDamage}`)
  console.log(`  üõ°Ô∏è Total Defense: ${combatStats.totalDefense}`)
  
  console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ò:')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—ã –≤–ª–∏—è—é—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const checks = [
    {
      stat: 'strength',
      value: testCharacter.strength,
      affects: `attack_damage (${calculatedStats.attack_damage}), critical_damage (${calculatedStats.critical_damage.toFixed(2)}%)`,
      working: calculatedStats.attack_damage > 0
    },
    {
      stat: 'agility',
      value: testCharacter.agility,
      affects: `attack_damage (${calculatedStats.attack_damage}), critical_chance (${calculatedStats.critical_chance.toFixed(2)}%), attack_speed (${calculatedStats.attack_speed.toFixed(2)}%)`,
      working: calculatedStats.critical_chance > 5 || calculatedStats.attack_speed > 100
    },
    {
      stat: 'intelligence',
      value: testCharacter.intelligence,
      affects: `mana (${calculatedStats.max_mana}), magic_damage (${calculatedStats.magic_damage}), mana_regen (${calculatedStats.mana_regen.toFixed(2)})`,
      working: calculatedStats.max_mana > 50 || calculatedStats.magic_damage > 0
    },
    {
      stat: 'endurance',
      value: testCharacter.endurance,
      affects: `health (${calculatedStats.max_health}), defense (${calculatedStats.defense}), health_regen (${calculatedStats.health_regen.toFixed(2)})`,
      working: calculatedStats.max_health > 100 || calculatedStats.defense > 0
    },
    {
      stat: 'precision',
      value: testCharacter.precision,
      affects: `accuracy (${calculatedStats.accuracy.toFixed(2)}%) ‚Üí DPS`,
      working: calculatedStats.accuracy > 85
    },
    {
      stat: 'evasion',
      value: testCharacter.evasion,
      affects: `dodge_chance (${calculatedStats.dodge_chance.toFixed(2)}%) ‚Üí Effective HP`,
      working: calculatedStats.dodge_chance > 5
    },
    {
      stat: 'stealth',
      value: testCharacter.stealth,
      affects: `stealth_bonus (${calculatedStats.stealth_bonus.toFixed(2)}) ‚Üí DPS`,
      working: calculatedStats.stealth_bonus > 0
    }
  ]
  
  checks.forEach(check => {
    const status = check.working ? '‚úÖ' : '‚ùå'
    console.log(`  ${status} ${check.stat.toUpperCase()} (${check.value}) ‚Üí ${check.affects}`)
  })
  
  const workingStats = checks.filter(check => check.working).length
  const totalStats = checks.length
  
  console.log(`\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢: ${workingStats}/${totalStats} —Å—Ç–∞—Ç–æ–≤ –≤–ª–∏—è—é—Ç –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏`)
  
  if (workingStats === totalStats) {
    console.log('üéâ –í–°–ï –°–¢–ê–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ü–†–ê–í–ò–õ–¨–ù–û!')
  } else {
    console.log('‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –°–¢–ê–¢–´ –ù–ï –í–õ–ò–Ø–Æ–¢ –ù–ê –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò')
  }
  
  return {
    working: workingStats === totalStats,
    workingStats,
    totalStats,
    calculatedStats
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  (window as any).testStatsConnection = testStatsConnection
}
