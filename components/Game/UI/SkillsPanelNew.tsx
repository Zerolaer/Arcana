'use client'

import { useState, useEffect } from 'react'
import { Character } from '@/types/game'
import { PassiveSkill } from '@/types/skills'
import { getAvailablePassiveSkills, getLearnedPassiveSkills, getClassNameById } from '@/lib/passiveSkills'
import { getAvailableSkills, ActiveSkill } from '@/lib/activeSkills'
import { supabase } from '@/lib/supabase'
import { BookOpen, Sword, Sparkles, Zap, Coins } from 'lucide-react'

interface SkillsPanelNewProps {
  character: Character
  onUpdateCharacter: (updates: Partial<Character>, silent?: boolean) => Promise<boolean>
  isLoading: boolean
}

export default function SkillsPanelNew({ character, onUpdateCharacter, isLoading }: SkillsPanelNewProps) {
  const [availablePassiveSkills, setAvailablePassiveSkills] = useState<PassiveSkill[]>([])
  const [availableActiveSkills, setAvailableActiveSkills] = useState<ActiveSkill[]>([])
  const [selectedSkill, setSelectedSkill] = useState<ActiveSkill | null>(null)
  const [showPurchaseModal, setShowPurchaseModal] = useState(false)
  const [className, setClassName] = useState<string>('')
  const [skillsLoading, setSkillsLoading] = useState(true)
  const [learnedSkills, setLearnedSkills] = useState<string[]>([])

  useEffect(() => {
    const loadSkills = async () => {
      try {
        setSkillsLoading(true)
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', character.id, '—É—Ä–æ–≤–µ–Ω—å:', character.level, '–∫–ª–∞—Å—Å:', character.class_id)
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–ª–ª—ã
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑—É—á–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∏–ª–ª—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', character.id)
        const { data: characterSkillsData, error: characterSkillsError } = await supabase
          .from('character_skills')
          .select('skill_id')
          .eq('character_id', character.id)

        let currentLearnedSkills: string[] = []
        if (characterSkillsError) {
          console.error('Error fetching character skills:', characterSkillsError)
        } else {
          console.log('üîç –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤ character_skills:', characterSkillsData)
          
          if (characterSkillsData && characterSkillsData.length > 0) {
            const skillIds = characterSkillsData.map((row: any) => row.skill_id)
            console.log('üîç Skill IDs:', skillIds)

            const { data: skillsData, error: skillsError } = await supabase
              .from('skills')
              .select('id, skill_key')
              .in('id', skillIds)

            if (skillsError) {
              console.error('Error fetching skills:', skillsError)
            } else {
              console.log('üîç Skills data:', skillsData)
              currentLearnedSkills = skillsData
                ?.map((skill: any) => skill.skill_key)
                .filter(Boolean) || []
              console.log('üîç –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–∫–∏–ª–ª—ã:', currentLearnedSkills)
              setLearnedSkills(currentLearnedSkills)
            }
          } else {
            console.log('üîç –ù–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–∫–∏–ª–ª–æ–≤')
            setLearnedSkills([])
          }
        }

        // –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ UUID
        try {
          const { data: classData, error: classError } = await (supabase as any)
            .from('character_classes')
            .select('name')
            .eq('id', character.class_id)
            .single()
          
          if (classError) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–∞:', classError)
          } else if (classData) {
            console.log('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:', classData.name)
            
            const classMapping = {
              '–õ—É—á–Ω–∏–∫': 'archer',
              '–ú–∞–≥': 'mage', 
              '–ë–µ—Ä—Å–µ—Ä–∫': 'berserker',
              '–ê—Å—Å–∞—Å–∏–Ω': 'assassin'
            }
            
            const classNameKey = classMapping[classData.name as keyof typeof classMapping] as keyof typeof getAvailableSkills
            console.log('–ö–ª—é—á –∫–ª–∞—Å—Å–∞:', classNameKey)
            
            if (classNameKey) {
              setClassName(classNameKey)
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º currentLearnedSkills –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –≤—ã—à–µ
              const activeSkills = getAvailableSkills(classNameKey, character.level, currentLearnedSkills)
              console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:', activeSkills)
              console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:', activeSkills.length)
              setAvailableActiveSkills(activeSkills)
            } else {
              console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á –∫–ª–∞—Å—Å–∞ –¥–ª—è:', classData.name)
              console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏:', Object.keys(classMapping))
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª–∞—Å—Å–∞:', error)
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { data: passiveSkillsData, error: passiveError } = await (supabase as any)
          .rpc('get_character_passive_skills', { p_character_id: character.id })
        
        if (passiveError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Å—Å–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤:', passiveError)
          // Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
          const className = getClassNameById(character.class_id)
          const passiveSkills = getAvailablePassiveSkills(className, character.level)
          setAvailablePassiveSkills(passiveSkills)
        } else {
          console.log('–ü–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –ë–î:', passiveSkillsData)
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          const formattedPassiveSkills = passiveSkillsData.map((skill: any) => ({
            id: skill.skill_key,
            name: skill.name,
            description: skill.description,
            level_requirement: skill.level_requirement,
            icon: skill.icon || '‚≠ê',
            stat_bonuses: skill.stat_bonuses || {},
            is_learned: skill.is_learned
          }))
          setAvailablePassiveSkills(formattedPassiveSkills)
        }

        // –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ç–∞–º–∏
        const classMapping = {
          '–õ—É—á–Ω–∏–∫': 'archer',
          '–ú–∞–≥': 'mage', 
          '–ë–µ—Ä—Å–µ—Ä–∫': 'berserker',
          '–ê—Å—Å–∞—Å–∏–Ω': 'assassin'
        }
        
        const classNameKey = classMapping[className as keyof typeof classMapping] as keyof typeof getAvailableSkills
        if (classNameKey) {
          setClassName(classNameKey)
          const activeSkills = getAvailableSkills(classNameKey, character.level)
          console.log('–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ):', activeSkills)
          setAvailableActiveSkills(activeSkills)
        }
        setSkillsLoading(false)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤—ã–∫–æ–≤:', error)
        setSkillsLoading(false)
      }
    }

    loadSkills()
  }, [character.level, character.class_id, character.id])

  // –ü–æ–∫—É–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞
  const purchaseSkill = async (skill: ActiveSkill) => {
    if (character.gold < skill.cost_to_learn) {
      alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞!')
      return
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—Ç–∏—Ö–æ, –±–µ–∑ –ø–æ–∫–∞–∑–∞ "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
      await onUpdateCharacter({ 
        gold: character.gold - skill.cost_to_learn 
      }, true) // silent = true
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
      setAvailableActiveSkills(prevSkills => 
        prevSkills.map(s => 
          s.id === skill.id 
            ? { ...s, is_learned: true }
            : s
        )
      )
      
      // –û–±–Ω–æ–≤–ª—è–µ–º learnedSkills
      setLearnedSkills(prev => [...prev, skill.id])
      
      setShowPurchaseModal(false)
      alert(`–ù–∞–≤—ã–∫ "${skill.name}" –∏–∑—É—á–µ–Ω!`)
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      const { data, error } = await (supabase as any)
        .rpc('learn_active_skill', { 
          p_character_id: character.id, 
          p_skill_key: skill.id 
        })

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞:', error)
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞: ' + error.message)
        return
      }

      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–∞:', data)

      if (data && data.success) {
        // –ù–∞–≤—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑—É—á–µ–Ω –≤ –ë–î
        console.log('–ù–∞–≤—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑—É—á–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', data.skill_learned)
        
        if (data.already_learned) {
          console.log('–ù–∞–≤—ã–∫ —É–∂–µ –±—ã–ª –∏–∑—É—á–µ–Ω —Ä–∞–Ω–µ–µ')
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
        setAvailableActiveSkills(prevSkills => 
          prevSkills.map(s => 
            s.id === skill.id 
              ? { ...s, is_learned: true }
              : s
          )
        )
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–≤—ã–∫–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const classMapping = {
          '–õ—É—á–Ω–∏–∫': 'archer',
          '–ú–∞–≥': 'mage', 
          '–ë–µ—Ä—Å–µ—Ä–∫': 'berserker',
          '–ê—Å—Å–∞—Å–∏–Ω': 'assassin'
        }
        
        const classNameKey = classMapping[className as keyof typeof classMapping] as keyof typeof getAvailableSkills
        if (classNameKey) {
          const activeSkills = getAvailableSkills(classNameKey, character.level)
          setAvailableActiveSkills(activeSkills)
        }
      } else {
        console.error('–û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è –≤ –ë–î:', data?.error)
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: ' + (data?.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–æ–ª–æ—Ç–æ –µ—Å–ª–∏ –Ω–∞–≤—ã–∫ –Ω–µ –∏–∑—É—á–∏–ª—Å—è
        await onUpdateCharacter({ 
          gold: character.gold + skill.cost_to_learn 
        }, true)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –Ω–∞–≤—ã–∫–∞:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–∞–≤—ã–∫–∞')
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É –Ω–∞–≤—ã–∫—É
  const handleSkillClick = (skill: ActiveSkill) => {
    if (skill.is_learned) {
      alert(`–ù–∞–≤—ã–∫ "${skill.name}" —É–∂–µ –∏–∑—É—á–µ–Ω!`)
    } else if (skill.level_requirement <= character.level) {
      setSelectedSkill(skill)
      setShowPurchaseModal(true)
    } else {
      alert(`–¢—Ä–µ–±—É–µ—Ç—Å—è ${skill.level_requirement} —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞`)
    }
  }

  if (skillsLoading) {
    return (
      <div className="flex-1 game-content p-4 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-400 mx-auto mb-4"></div>
          <p className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–≤—ã–∫–æ–≤...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex-1 game-content p-4 space-y-4">
      {/* Skills Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 h-[calc(100vh-180px)]">
        
        {/* –ü–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ */}
        <div className="game-panel p-4">
          <div className="mb-4">
            <h2 className="text-xl font-bold text-white flex items-center space-x-2">
              <Sparkles className="w-5 h-5 text-blue-400" />
              <span>–ü–∞—Å—Å–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</span>
            </h2>
            <p className="text-gray-400 text-sm">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑—É—á–∞—é—Ç—Å—è –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —É—Ä–æ–≤–Ω—è</p>
          </div>
          
          <div className="h-[calc(100%-70px)] overflow-y-auto">
            <div className="flex flex-col gap-3 pt-2 pb-2">
              {availablePassiveSkills.map((skill) => (
                <div 
                  key={skill.id}
                  className={`skill-card ${skill.is_learned ? 'skill-card--learned' : 'skill-card--locked'}`}
                >
                  {/* –ò–∫–æ–Ω–∫–∞ –Ω–∞–≤—ã–∫–∞ */}
                  <div className="text-3xl flex-shrink-0">üì¶</div>
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤—ã–∫–µ */}
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-1">
                      <div className="text-sm font-semibold text-white">
                        {skill.name}
                      </div>
                      <div className="text-xs text-gray-400">
                        –£—Ä–æ–≤–µ–Ω—å {skill.level_requirement}
                      </div>
                    </div>
                    
                    <p className="text-sm text-gray-300 mb-2">{skill.description}</p>
                    
                    {/* –ë–æ–Ω—É—Å—ã —Å—Ç–∞—Ç–æ–≤ */}
                    <div className="text-xs">
                      {(() => {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º stat_bonuses –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫—É
                        let bonuses = skill.stat_bonuses
                        if (typeof bonuses === 'string') {
                          try {
                            bonuses = JSON.parse(bonuses)
                          } catch (e) {
                            bonuses = {}
                          }
                        }
                        
                        return bonuses && Object.entries(bonuses).map(([stat, value]) => (
                          value && value > 0 ? (
                            <span key={stat} className="mr-2 text-green-400">
                              +{value} {stat}
                            </span>
                          ) : null
                        ))
                      })()}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ */}
        <div className="game-panel p-4">
          <div className="mb-4">
            <h2 className="text-xl font-bold text-white flex items-center space-x-2">
              <Sword className="w-5 h-5 text-yellow-400" />
              <span>–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</span>
            </h2>
            <p className="text-gray-400 text-sm">–ò–∑—É—á–∞—é—Ç—Å—è –∑–∞ –∑–æ–ª–æ—Ç–æ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —É—Ä–æ–≤–Ω—è</p>
          </div>
          
          <div className="h-[calc(100%-70px)] overflow-y-auto">
            <div className="flex flex-col gap-3 pt-2 pb-2">
              {availableActiveSkills.map((skill) => (
                <div 
                  key={skill.id}
                  className={`skill-card ${skill.is_learned ? 'skill-card--learned' : 'skill-card--locked'}`}
                  onClick={() => handleSkillClick(skill)}
                >
                  {/* –ò–∫–æ–Ω–∫–∞ –Ω–∞–≤—ã–∫–∞ */}
                  <div className="text-3xl flex-shrink-0">üì¶</div>
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤—ã–∫–µ */}
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-1">
                      <div className="text-sm font-semibold text-white">
                        {skill.name}
                      </div>
                      <div className="text-xs text-gray-400">
                        –£—Ä–æ–≤–µ–Ω—å {skill.level_requirement}
                      </div>
                    </div>
                    
                    <p className="text-sm text-gray-300 mb-2">{skill.description}</p>
                    
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤—ã–∫–µ */}
                    <div className="flex items-center gap-4 text-xs">
                      <div className="text-blue-400">
                        –£—Ä–æ–Ω: {skill.base_damage}
                      </div>
                      <div className="text-purple-400">
                        –ú–∞–Ω–Ω–∞: {skill.mana_cost}
                      </div>
                      <div className="text-yellow-400">
                        –ö—É–ª–¥–∞—É–Ω: {skill.cooldown}—Å
                      </div>
                    </div>
                  </div>
                  
                  {/* –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑—É—á–µ–Ω–∏—è */}
                  {!skill.is_learned && (
                    <div className="flex-shrink-0">
                      <div className="text-xs text-yellow-400 flex items-center space-x-1">
                        <span>üí∞</span>
                        <span>{skill.cost_to_learn}</span>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –Ω–∞–≤—ã–∫–∞ */}
      {showPurchaseModal && selectedSkill && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="game-panel p-4 max-w-md w-full mx-4">
            <h3 className="text-xl font-bold text-white mb-4">
              –ò–∑—É—á–∏—Ç—å –Ω–∞–≤—ã–∫ "{selectedSkill.name}"
            </h3>
            
            <div className="space-y-4">
              <div>
                <p className="text-gray-300 mb-2">{selectedSkill.description}</p>
                
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="text-blue-400">
                    –£—Ä–æ–Ω: {selectedSkill.base_damage}
                  </div>
                  <div className="text-purple-400">
                    –ú–∞–Ω–Ω–∞: {selectedSkill.mana_cost}
                  </div>
                  <div className="text-yellow-400">
                    –ö—É–ª–¥–∞—É–Ω: {selectedSkill.cooldown}—Å
                  </div>
                  <div className="text-green-400">
                    –¢–∏–ø: {selectedSkill.skill_type}
                  </div>
                </div>
              </div>
              
              <div className="flex items-center justify-between pt-4 border-t border-white/10">
                <div className="text-yellow-400 flex items-center space-x-2">
                  <Coins className="w-4 h-4" />
                  <span>{selectedSkill.cost_to_learn} –∑–æ–ª–æ—Ç–∞</span>
                </div>
                
                <div className="flex space-x-3">
                  <button 
                    className="game-button game-button--secondary"
                    onClick={() => setShowPurchaseModal(false)}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                  <button 
                    className="game-button"
                    onClick={() => purchaseSkill(selectedSkill)}
                  >
                    –ò–∑—É—á–∏—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}