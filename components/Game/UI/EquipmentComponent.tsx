'use client'

import { useState, useEffect, useCallback } from 'react'
import { Character } from '@/types/game'
import { toast } from 'react-hot-toast'
import { supabase } from '@/lib/supabase'
import ItemTooltip, { GameItem } from '../../UI/ItemTooltip'

interface EquipmentComponentProps {
  character: Character
  onUpdateCharacter?: (updates: Partial<Character>) => Promise<boolean>
  onEquipmentChange?: () => void // Callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  layout?: 'character' | 'inventory' // –¢–∏–ø –º–∞–∫–µ—Ç–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω –º–∞–∫–µ—Ç)
}

interface EquipmentSlot {
  slot_type: string  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –≤ –ë–î –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è slot_type
  item?: GameItem
  quality?: number
  upgrade_level?: number
  equipped_at?: string
}

// –ú–∞–∫–µ—Ç —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ - —Å–ª–æ—Ç—ã –≤–æ–∫—Ä—É–≥ –±–æ–ª—å—à–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
const equipmentSlots = [
  // –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
  { key: 'amulet', name: '–ê–º—É–ª–µ—Ç', icon: 'üìø', position: 'left', index: 0 },
  { key: 'weapon', name: '–û—Ä—É–∂–∏–µ', icon: '‚öîÔ∏è', position: 'left', index: 1 },
  { key: 'armor', name: '–î–æ—Å–ø–µ—Ö–∏', icon: 'ü¶∫', position: 'left', index: 2 },
  { key: 'gloves', name: '–ü–µ—Ä—á–∞—Ç–∫–∏', icon: 'üß§', position: 'left', index: 3 },
  { key: 'boots', name: '–ë–æ—Ç–∏–Ω–∫–∏', icon: 'üë¢', position: 'left', index: 4 },
  
  // –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
  { key: 'helmet', name: '–®–ª–µ–º', icon: 'ü™ñ', position: 'right', index: 0 },
  { key: 'shield', name: '–©–∏—Ç', icon: 'üõ°Ô∏è', position: 'right', index: 1 },
  { key: 'ring1', name: '–ö–æ–ª—å—Ü–æ 1', icon: 'üíç', position: 'right', index: 2 },
  { key: 'ring2', name: '–ö–æ–ª—å—Ü–æ 2', icon: 'üíç', position: 'right', index: 3 },
  // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏–∏
  { key: 'empty', name: '', icon: '', position: 'right', index: 4 },
]

// –ú–∞–ø–ø–∏–Ω–≥ –∫–ª–∞—Å—Å–æ–≤ –ø–æ ID (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
const CLASS_NAMES: Record<string, string> = {
  // –ò–∑ supabase/test_data.sql (–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã)
  'warrior': '–í–æ–∏–Ω',
  'mage': '–ú–∞–≥',
  'rogue': '–†–∞–∑–±–æ–π–Ω–∏–∫',
  'priest': '–ñ—Ä–µ—Ü',
  'paladin': '–ü–∞–ª–∞–¥–∏–Ω',
  'hunter': '–û—Ö–æ—Ç–Ω–∏–∫',
  'warlock': '–í–∞—Ä–ª–æ–∫',
  'death_knight': '–†—ã—Ü–∞—Ä—å –°–º–µ—Ä—Ç–∏',
  'shaman': '–®–∞–º–∞–Ω',
  'monk': '–ú–æ–Ω–∞—Ö',
  'druid': '–î—Ä—É–∏–¥',
  'bard': '–ë–∞—Ä–¥',
  'ranger': '–°–ª–µ–¥–æ–ø—ã—Ç',
  'sorcerer': '–ß–∞—Ä–æ–¥–µ–π',
  'barbarian': '–í–∞—Ä–≤–∞—Ä',
  'fighter': '–ë–æ–µ—Ü',
  'cleric': '–ö–ª–∏—Ä–∏–∫',
  'wizard': '–í–æ–ª—à–µ–±–Ω–∏–∫',
  'thief': '–í–æ—Ä',
  'knight': '–†—ã—Ü–∞—Ä—å',
  'archer': '–õ—É—á–Ω–∏–∫',
  'assassin': '–£–±–∏–π—Ü–∞',
  'necromancer': '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç',
  'berserker': '–ë–µ—Ä—Å–µ—Ä–∫'
}

// –ú–∞–ø–ø–∏–Ω–≥ –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ (—ç–º–æ–¥–∑–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å–∞–º –∏–∑ supabase/data.sql
const CLASS_AVATARS: Record<string, { emoji: string; image?: string }> = {
  // –ö–ª–∞—Å—Å—ã —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏ (–∏–∑ —Ç–≤–æ–∏—Ö 4 –∫–∞—Ä—Ç–∏–Ω–æ–∫)
  '–ú–∞–≥': { emoji: 'üîÆ', image: '/avatars/mage.png' }, // –ú–∞–≥ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
  '–ë–µ—Ä—Å–µ—Ä–∫': { emoji: 'ü™ì', image: '/avatars/berserker.png' }, // –ë–µ—Ä—Å–µ—Ä–∫ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
  '–õ—É—á–Ω–∏–∫': { emoji: 'üèπ', image: '/avatars/archer.png' }, // –õ—É—á–Ω–∏–∫ - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
  '–£–±–∏–π—Ü–∞': { emoji: 'üó°Ô∏è', image: '/avatars/rogue.png' }, // –£–±–∏–π—Ü–∞ (–≤–º–µ—Å—Ç–æ –†–∞–∑–±–æ–π–Ω–∏–∫–∞) - –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
  
  // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å —ç–º–æ–¥–∑–∏ (–ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫)
  '–í–æ–∏–Ω': { emoji: '‚öîÔ∏è' }, // –í–æ–∏–Ω - –º–µ—á–∏
  '–ü–∞–ª–∞–¥–∏–Ω': { emoji: 'üõ°Ô∏è' }, // –ü–∞–ª–∞–¥–∏–Ω - —â–∏—Ç
  '–ù–µ–∫—Ä–æ–º–∞–Ω—Ç': { emoji: 'üíÄ' }, // –ù–µ–∫—Ä–æ–º–∞–Ω—Ç - —á–µ—Ä–µ–ø
  '–î—Ä—É–∏–¥': { emoji: 'üåø' }, // –î—Ä—É–∏–¥ - –ª–∏—Å—Ç—å—è
  '–ú–æ–Ω–∞—Ö': { emoji: 'üëä' }, // –ú–æ–Ω–∞—Ö - –∫—É–ª–∞–∫
  '–í–∞—Ä–ª–æ–∫': { emoji: 'üî•' }, // –í–∞—Ä–ª–æ–∫ - –æ–≥–æ–Ω—å
  '–†—ã—Ü–∞—Ä—å –°–º–µ—Ä—Ç–∏': { emoji: '‚ö∞Ô∏è' }, // –†—ã—Ü–∞—Ä—å –°–º–µ—Ä—Ç–∏ - –≥—Ä–æ–±
  '–°–ª–µ–¥–æ–ø—ã—Ç': { emoji: 'ü¶Ö' } // –°–ª–µ–¥–æ–ø—ã—Ç - –æ—Ä–µ–ª
}

export default function EquipmentComponent({ 
  character, 
  onUpdateCharacter, 
  onEquipmentChange
}: EquipmentComponentProps) {
  const [equipment, setEquipment] = useState<EquipmentSlot[]>([])
  const [loading, setLoading] = useState(true)
  const [characterClass, setCharacterClass] = useState<{ name: string; icon: string } | null>(null)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞—Å—Å–µ
  const loadCharacterClass = useCallback(async () => {
    try {
      const { data, error } = await supabase
        .from('character_classes')
        .select('name, icon')
        .eq('id', character.class_id)
        .single()

      if (error) {
        console.error('Error loading character class:', error)
        return
      }

      if (data) {
        setCharacterClass(data)
      }
    } catch (error) {
      console.error('Error loading character class:', error)
    }
  }, [character.class_id])

  // –ó–∞–≥—Ä—É–∑–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  const loadEquipment = useCallback(async () => {
    try {
      setLoading(true)
      const { data, error } = await (supabase as any)
        .rpc('get_character_equipment', { p_character_id: character.id })

      if (error) {
        console.error('Error loading equipment:', error)
        return
      }

      console.log('Equipment data from DB:', data) // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('Equipment data type:', typeof data, Array.isArray(data))
      if (data && data.length > 0) {
        console.log('First equipment item:', data[0])
        console.log('Equipment slots found:', data.map((eq: any) => eq.slot_type))
      }
      setEquipment(data || [])
    } catch (error) {
      console.error('Error loading equipment:', error)
    } finally {
      setLoading(false)
    }
  }, [character.id])

  useEffect(() => {
    loadEquipment()
    loadCharacterClass()
  }, [loadEquipment, loadCharacterClass])

  // –°–Ω—è—Ç–∏–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  const handleUnequipItem = async (slotType: string) => {
    try {
      const { data, error } = await (supabase as any)
        .rpc('unequip_item', {
          p_character_id: character.id,
          p_slot_type: slotType
        })

      if (error) {
        console.error('Error unequipping item:', error)
        toast.error('–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞')
        return
      }

      if (data?.success) {
        toast.success('–ü—Ä–µ–¥–º–µ—Ç —Å–Ω—è—Ç')
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        setEquipment(prev => {
          const newEquipment = { ...prev }
          delete (newEquipment as any)[slotType]
          return newEquipment
        })
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        onEquipmentChange?.()
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è
        if (onUpdateCharacter) {
          const updatedChar = { ...character }
          await onUpdateCharacter(updatedChar)
        }
      } else {
        toast.error(data?.error || '–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞')
      }
    } catch (error) {
      console.error('Error unequipping item:', error)
      toast.error('–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞')
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center h-32">
        <div className="animate-spin w-6 h-6 border-2 border-primary-500 border-t-transparent rounded-full"></div>
      </div>
    )
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Å–ª–æ—Ç–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
  const renderEquipmentSlot = (slot: typeof equipmentSlots[0]) => {
    if (slot.key === 'empty') {
      return <div className="w-16 h-16"></div>
    }

    const equippedItem = equipment.find(eq => eq.slot_type === slot.key)
    const hasItem = !!equippedItem?.item
    
    // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è armor —Å–ª–æ—Ç–∞
    if (slot.key === 'armor') {
      console.log(`Checking slot ${slot.key}:`, {
        equipmentLength: equipment.length,
        equipmentSlots: equipment.map((eq: EquipmentSlot) => eq.slot_type),
        foundItem: equippedItem,
        hasItem
      })
    }
    
    return (
      <div key={slot.key} className="relative mb-2">
        {hasItem && equippedItem?.item ? (
          <ItemTooltip
            item={equippedItem.item}
            onUnequip={() => handleUnequipItem(slot.key)}
            onClose={() => {}} // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç—É–ª—Ç–∏–ø–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ —Å–∞–º–æ–º ItemTooltip
            showActions={true}
            isEquipped={true}
          >
            <div className="w-16 h-16 rounded-lg flex flex-col items-center justify-center p-1 cursor-pointer bg-dark-200/50 border-2 border-solid border-gold-400/60 transition-colors">
              <div className="text-lg">{equippedItem.item.icon}</div>
            </div>
          </ItemTooltip>
        ) : (
          <div className="w-16 h-16 bg-dark-200/30 border border-dark-300/50 rounded-lg flex flex-col items-center justify-center p-1 opacity-40">
            <div className="text-sm">{slot.icon}</div>
          </div>
        )}
      </div>
    )
  }

  return (
    <div className="flex-1 flex flex-col items-center justify-center p-4">
      {/* –û–°–ù–û–í–ù–ê–Ø –≠–ö–ò–ü–ò–†–û–í–ö–ê */}
      <div className="flex items-center justify-center gap-8 mb-6">
        
        {/* –õ–ï–í–ê–Ø –ö–û–õ–û–ù–ö–ê –°–õ–û–¢–û–í */}
        <div className="flex flex-col items-center justify-center">
          {equipmentSlots
            .filter(slot => slot.position === 'left')
            .sort((a, b) => a.index - b.index)
            .map(slot => renderEquipmentSlot(slot))
          }
        </div>

        {/* –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô –ü–ï–†–°–û–ù–ê–ñ */}
        <div className="flex flex-col items-center justify-center">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ */}
          <div className="text-center mb-4">
            <div className="text-white font-semibold">{character.name}</div>
            <div className="text-sm text-gray-400">Lv {character.level} {characterClass?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}</div>
          </div>
          
          {/* –ë–æ–ª—å—à–∞—è —Ñ–∏–≥—É—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ */}
          <div className="relative w-48 h-64 bg-gradient-to-b from-dark-100/20 to-dark-200/40 border border-dark-300/30 rounded-lg flex items-center justify-center overflow-hidden">
            {/* –ê–≤–∞—Ç–∞—Ä–∫–∞ –∫–ª–∞—Å—Å–∞ */}
            {(() => {
              const avatarData = CLASS_AVATARS[character.class_id]
              if (avatarData?.image) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                return (
                  <img 
                    src={avatarData.image} 
                    alt={characterClass?.name || '–ü–µ—Ä—Å–æ–Ω–∞–∂'}
                    className="w-full h-full object-cover opacity-90"
                    onError={(e) => {
                      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –∫–ª–∞—Å—Å–∞
                      const target = e.target as HTMLImageElement
                      target.style.display = 'none'
                      const parent = target.parentElement
                      if (parent) {
                        const emojiDiv = document.createElement('div')
                        emojiDiv.className = 'text-8xl opacity-80 absolute inset-0 flex items-center justify-center'
                        emojiDiv.textContent = characterClass?.icon || avatarData.emoji || 'üë§'
                        parent.appendChild(emojiDiv)
                      }
                    }}
                  />
                )
              } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏ –∫–ª–∞—Å—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ fallback
                return (
                  <div className="text-8xl opacity-80">
                    {characterClass?.icon || avatarData?.emoji || 'üë§'}
                  </div>
                )
              }
            })()}
            
            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∞—Å—Å–µ */}
            <div className="absolute bottom-2 left-2 right-2 text-center">
              <div className="text-xs text-gray-400 bg-dark-200/50 rounded px-2 py-1">
                {characterClass?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
              </div>
            </div>
          </div>
          
          {/* –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º */}
          <div className="mt-4 grid grid-cols-2 gap-4 text-xs">
            <div className="text-center">
              <div className="text-green-400 font-semibold">{character.health}</div>
              <div className="text-gray-400">Health Points</div>
            </div>
            <div className="text-center">
              <div className="text-blue-400 font-semibold">{character.mana}</div>
              <div className="text-gray-400">Magic Power</div>
            </div>
            <div className="text-center">
              <div className="text-red-400 font-semibold">{character.strength + character.dexterity}</div>
              <div className="text-gray-400">Attack</div>
            </div>
            <div className="text-center">
              <div className="text-purple-400 font-semibold">{character.intelligence}</div>
              <div className="text-gray-400">Intelligence</div>
            </div>
          </div>

        </div>

        {/* –ü–†–ê–í–ê–Ø –ö–û–õ–û–ù–ö–ê –°–õ–û–¢–û–í */}
        <div className="flex flex-col items-center justify-center">
          {equipmentSlots
            .filter(slot => slot.position === 'right')
            .sort((a, b) => a.index - b.index)
            .map(slot => renderEquipmentSlot(slot))
          }
        </div>
        
      </div>

      {/* –û–¢–î–ï–õ–¨–ù–´–ï –ü–£–°–¢–´–ï –Ø–ß–ï–ô–ö–ò –ü–û–î –≠–ö–ò–ü–ò–†–û–í–ö–û–ô */}
      <div className="space-y-2">
        {/* –ü–µ—Ä–≤–∞—è –ª–∏–Ω–∏—è */}
        <div className="flex justify-center gap-2">
          {Array.from({ length: 6 }, (_, index) => (
            <div key={`line1-${index}`} className="w-12 h-12 bg-dark-200/20 border border-dashed border-dark-300/30 rounded-lg flex items-center justify-center opacity-40">
              <div className="text-dark-500 text-xs">+</div>
            </div>
          ))}
        </div>
        
        {/* –í—Ç–æ—Ä–∞—è –ª–∏–Ω–∏—è */}
        <div className="flex justify-center gap-2">
          {Array.from({ length: 6 }, (_, index) => (
            <div key={`line2-${index}`} className="w-12 h-12 bg-dark-200/20 border border-dashed border-dark-300/30 rounded-lg flex items-center justify-center opacity-40">
              <div className="text-dark-500 text-xs">+</div>
            </div>
          ))}
        </div>
      </div>

    </div>
  )
}