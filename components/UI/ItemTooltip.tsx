'use client'

import { ReactNode } from 'react'
import Tooltip from './Tooltip'

export interface ItemStats {
  // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  strength_bonus?: number
  dexterity_bonus?: number
  intelligence_bonus?: number
  vitality_bonus?: number
  energy_bonus?: number
  luck_bonus?: number
  
  // –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  attack_damage?: number
  magic_damage?: number
  defense?: number
  magic_resistance?: number
  
  // –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  damage?: number
  health?: number
  mana?: number
  critChance?: number
  critDamage?: number
  speed?: number
  [key: string]: number | undefined
}

export interface GameItem {
  id: string
  name: string
  description: string
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary' | 'mythic'
  type: 'weapon' | 'armor' | 'accessory' | 'consumable' | 'material'
  subType?: string
  icon: string
  level?: number
  stats: ItemStats
  value: number
  stackable?: boolean
  stackSize?: number
  
  // –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–ê–ß–ï–°–¢–í–ê (–≤–º–µ—Å—Ç–æ –ø—Ä–æ—á–Ω–æ—Å—Ç–∏)
  quality?: number // 1-100
  
  // –ë–∞–∑–æ–≤—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—ã
  base_stats?: ItemStats
  actual_stats?: ItemStats
  
  setBonus?: string
  equipment_slot?: string
  slot_position?: number
  item_key?: string
  isEquipped?: boolean
  
  // –£–±–∏—Ä–∞–µ–º requirements (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  // requirements?: { ... }
}

interface ItemTooltipProps {
  item: GameItem
  children: ReactNode
  className?: string
  onUse?: () => void
  onEquip?: () => void
  onUnequip?: () => void
  onClose?: () => void
  showActions?: boolean
  isEquipped?: boolean
}

const rarityColors = {
  common: '#9ca3af',      // Gray
  uncommon: '#10b981',    // Green  
  rare: '#3b82f6',        // Blue
  epic: '#8b5cf6',        // Purple
  legendary: '#f59e0b',   // Gold
  mythic: '#ef4444'       // Red
}

const rarityNames = {
  common: '–û–±—ã—á–Ω—ã–π',
  uncommon: '–ù–µ–æ–±—ã—á–Ω—ã–π',
  rare: '–†–µ–¥–∫–∏–π', 
  epic: '–≠–ø–∏—á–µ—Å–∫–∏–π',
  legendary: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π',
  mythic: '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π'
}

const statNames: Record<string, string> = {
  // –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  strength_bonus: '–°–∏–ª–∞',
  dexterity_bonus: '–õ–æ–≤–∫–æ—Å—Ç—å',
  intelligence_bonus: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
  vitality_bonus: '–ñ–∏–≤—É—á–µ—Å—Ç—å',
  energy_bonus: '–≠–Ω–µ—Ä–≥–∏—è',
  luck_bonus: '–£–¥–∞—á–∞',
  
  // –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  attack_damage: '–§–∏–∑–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω',
  magic_damage: '–ú–∞–≥–∏—á–µ—Å–∫–∏–π —É—Ä–æ–Ω',
  defense: '–ó–∞—â–∏—Ç–∞',
  magic_resistance: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞',
  
  // –°—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  damage: '–£—Ä–æ–Ω',
  health: '–ó–¥–æ—Ä–æ–≤—å–µ',
  mana: '–ú–∞–Ω–∞',
  critChance: '–®–∞–Ω—Å –∫—Ä–∏—Ç–∞',
  critDamage: '–£—Ä–æ–Ω –∫—Ä–∏—Ç–∞',
  speed: '–°–∫–æ—Ä–æ—Å—Ç—å'
}

export default function ItemTooltip({ 
  item, 
  children, 
  className, 
  onUse, 
  onEquip, 
  onUnequip, 
  onClose,
  showActions = false,
  isEquipped = false
}: ItemTooltipProps) {
  const renderStats = () => {
    if (!item.stats || typeof item.stats !== 'object') return null
    
    const stats = Object.entries(item.stats)
      .filter(([_, value]) => value && value > 0)
      .map(([key, value]) => [key, value!] as [string, number])
    
    if (stats.length === 0) return null

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    const baseStats = stats.filter(([key]) => key.includes('_bonus'))
    const combatStats = stats.filter(([key]) => ['attack_damage', 'magic_damage', 'defense', 'magic_resistance'].includes(key))
    const otherStats = stats.filter(([key]) => !key.includes('_bonus') && !['attack_damage', 'magic_damage', 'defense', 'magic_resistance'].includes(key))

    const renderStatGroup = (stats: [string, number][], title: string) => {
      if (stats.length === 0) return null
      
      return (
        <div className="mb-2">
          <div className="text-xs font-semibold text-blue-400 mb-1">{title}:</div>
          {stats.map(([key, value]) => (
            <div key={key} className="flex justify-between text-sm">
              <span className="text-gray-300">{statNames[key] || key}:</span>
              <span className="text-white font-medium">
                {key.includes('Chance') || key.includes('Speed') ? `${value}%` : `+${value}`}
              </span>
            </div>
          ))}
        </div>
      )
    }

    return (
      <div className="border-t border-white/20 pt-3 mt-3">
        <div className="text-sm font-semibold text-green-400 mb-2">–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</div>
        {renderStatGroup(baseStats, '–ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')}
        {renderStatGroup(combatStats, '–ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')}
        {renderStatGroup(otherStats, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã')}
      </div>
    )
  }

  const renderQuality = () => {
    if (item.quality === undefined || item.quality === null) return null

    const qualityColor = item.quality >= 80 ? 'text-green-400' : 
                        item.quality >= 60 ? 'text-blue-400' : 
                        item.quality >= 40 ? 'text-yellow-400' : 
                        item.quality >= 20 ? 'text-orange-400' : 'text-red-400'

    const qualityBgColor = item.quality >= 80 ? 'bg-green-400' : 
                          item.quality >= 60 ? 'bg-blue-400' : 
                          item.quality >= 40 ? 'bg-yellow-400' : 
                          item.quality >= 20 ? 'bg-orange-400' : 'bg-red-400'

    const qualityName = item.quality >= 90 ? '–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ–µ' :
                       item.quality >= 80 ? '–û—Ç–ª–∏—á–Ω–æ–µ' :
                       item.quality >= 60 ? '–•–æ—Ä–æ—à–µ–µ' :
                       item.quality >= 40 ? '–°—Ä–µ–¥–Ω–µ–µ' :
                       item.quality >= 20 ? '–ü–ª–æ—Ö–æ–µ' : '–£–∂–∞—Å–Ω–æ–µ'

    return (
      <div className="border-t border-white/20 pt-3 mt-3">
        <div className="flex items-center justify-between text-sm mb-2">
          <span className="text-gray-300">–ö–∞—á–µ—Å—Ç–≤–æ:</span>
          <div className="flex items-center space-x-2">
            <span className={qualityColor}>{qualityName}</span>
            <span className={qualityColor + ' font-bold'}>{item.quality}%</span>
          </div>
        </div>
        <div className="w-full bg-gray-700 rounded-full h-2">
          <div 
            className={`h-2 rounded-full transition-all duration-300 ${qualityBgColor}`}
            style={{ width: `${item.quality}%` }}
          />
        </div>
        <div className="text-xs text-gray-400 mt-1">
          –í–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∞—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–∞
        </div>
      </div>
    )
  }

  const tooltipContent = (
    <div className="item-tooltip max-w-sm">
      {/* Header */}
      <div className="mb-3">
        <div 
          className="text-lg font-bold mb-1"
          style={{ color: rarityColors[item.rarity] }}
        >
          {item.name}
        </div>
        <div className="flex items-center justify-between text-sm">
          <span 
            className="font-semibold"
            style={{ color: rarityColors[item.rarity] }}
          >
            {rarityNames[item.rarity]}
          </span>
          <span className="text-gray-400">
            –£—Ä. {item.level}
          </span>
        </div>
        <div className="text-xs text-gray-400 capitalize mt-1">
          {item.subType || item.type}
        </div>
      </div>

      {/* Description */}
      {item.description && (
        <div className="text-sm text-gray-300 mb-3 italic">
          "{item.description}"
        </div>
      )}

      {/* Stats */}
      {renderStats()}

      {/* Quality */}
      {renderQuality()}

      {/* Set Bonus */}
      {item.setBonus && (
        <div className="border-t border-white/20 pt-3 mt-3">
          <div className="text-sm font-semibold text-purple-400 mb-1">–°–µ—Ç-–±–æ–Ω—É—Å:</div>
          <div className="text-sm text-purple-300">{item.setBonus}</div>
        </div>
      )}

      {/* Value and Actions */}
      <div className="border-t border-white/20 pt-3 mt-3">
        <div className="flex items-center justify-between mb-2">
          <span className="text-sm text-gray-400">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
          <div className="flex items-center space-x-1">
            <span className="text-yellow-400 font-semibold">{item.value}</span>
            <span className="text-yellow-400">ü™ô</span>
          </div>
        </div>
        <div className="text-xs text-gray-400">
          üí∞ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å ‚Ä¢ ‚ö° –ú–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–∞ –æ—Å–∫–æ–ª–∫–∏
        </div>
      </div>

      {/* Action Buttons */}
      {showActions && (
        <div className="border-t border-white/10 pt-3 mt-3">
          <div className="flex flex-col space-y-2">
            {item.type === 'consumable' && onUse && (
              <button
                onClick={(e) => {
                  console.log('üö® Use button clicked!')
                  e.stopPropagation()
                  onUse()
                }}
                className="w-full px-3 py-2 bg-green-600 hover:bg-green-700 text-white text-sm rounded-md transition-colors flex items-center justify-center space-x-2"
              >
                <span>üß™</span>
                <span>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å</span>
              </button>
            )}
            
            {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –ù–∞–¥–µ—Ç—å/–°–Ω—è—Ç—å */}
            {(() => {
              const isItemEquipped = isEquipped || item.isEquipped
              const canEquip = (item.equipment_slot || item.type === 'weapon' || item.type === 'armor' || item.type === 'accessory') && item.type !== 'consumable' && item.type !== 'material'
              
              console.log('üîç RENDERING BUTTON FOR:', item.name, {
                isItemEquipped,
                canEquip,
                equipment_slot: item.equipment_slot,
                type: item.type,
                onEquip: !!onEquip,
                onUnequip: !!onUnequip
              })
              
              if (!canEquip || (!onEquip && !onUnequip)) return null
              
              return (
                <button
                  onMouseDown={(e) => {
                    console.log('üö®üö®üö® BUTTON MOUSE DOWN!', item.name, 'isEquipped:', isItemEquipped)
                    e.stopPropagation()
                  }}
                  onClick={(e) => {
                    console.log('üö®üö®üö® BUTTON CLICKED!', item.name, 'isEquipped:', isItemEquipped)
                    e.stopPropagation()
                    e.preventDefault()
                    
                    if (isItemEquipped) {
                      // –°–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                      if (onUnequip) {
                        console.log('üö®üö®üö® Calling onUnequip function')
                        onUnequip()
                        if (onClose) onClose()
                      }
                    } else {
                      // –ù–∞–¥–µ–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                      if (onEquip) {
                        console.log('üö®üö®üö® Calling onEquip function')
                        onEquip()
                        if (onClose) onClose()
                      }
                    }
                  }}
                  className={`w-full px-3 py-2 text-white text-sm rounded-md transition-colors flex items-center justify-center space-x-2 ${
                    isItemEquipped 
                      ? 'bg-red-600 hover:bg-red-700' 
                      : 'bg-blue-600 hover:bg-blue-700'
                  }`}
                  style={{ pointerEvents: 'auto', zIndex: 10000 }}
                >
                  <span>{isItemEquipped ? 'üëï' : '‚öîÔ∏è'}</span>
                  <span>{isItemEquipped ? '–°–Ω—è—Ç—å' : '–ù–∞–¥–µ—Ç—å'}</span>
                </button>
              )
            })()}
            
          </div>
        </div>
      )}
    </div>
  )

  return (
    <Tooltip 
      content={tooltipContent} 
      className={className}
      trigger="click"
    >
      {children}
    </Tooltip>
  )
}
