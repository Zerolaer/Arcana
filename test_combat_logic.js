// –ê–≤—Ç–æ-—Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–æ—è
console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ-—Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–æ—è...')

// –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
let combatState = {
  currentMobs: [
    { id: 1, name: '–ì–æ–±–ª–∏–Ω 1', health: 100, maxHealth: 100, attack: 20, defense: 5 },
    { id: 2, name: '–ì–æ–±–ª–∏–Ω 2', health: 80, maxHealth: 80, attack: 18, defense: 4 }
  ],
  isPlayerTurn: true,
  currentHealth: 200,
  currentMana: 100
}

let selectedSkillId = 'basic_attack'
let battleStarted = true
let damage = 50

console.log('üéØ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:')
console.log('–ú–æ–±—ã:', combatState.currentMobs.map(m => `${m.name}: ${m.health}/${m.maxHealth}`))
console.log('–•–æ–¥ –∏–≥—Ä–æ–∫–∞:', combatState.isPlayerTurn)

// –¢–µ—Å—Ç 1: –ê—Ç–∞–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –º–æ–±–∞
console.log('\nüìù –¢–ï–°–¢ 1: –ê—Ç–∞–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –º–æ–±–∞')
console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π:', {
  battleStarted,
  selectedSkillId,
  isPlayerTurn: combatState.isPlayerTurn
})

if (!battleStarted || !selectedSkillId || !combatState.isPlayerTurn) {
  console.log('‚ùå –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!')
} else {
  console.log('‚úÖ –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É')
  
  // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –∂–∏–≤–æ–≥–æ –º–æ–±–∞
  let targetIndex = -1
  for (let i = 0; i < combatState.currentMobs.length; i++) {
    if (combatState.currentMobs[i].health > 0) {
      targetIndex = i
      break
    }
  }
  
  console.log('üéØ –ò–Ω–¥–µ–∫—Å —Ü–µ–ª–∏:', targetIndex)
  
  if (targetIndex === -1) {
    console.log('‚ùå –ù–µ—Ç –∂–∏–≤—ã—Ö –º–æ–±–æ–≤!')
  } else {
    const target = combatState.currentMobs[targetIndex]
    console.log('üéØ –¶–µ–ª—å:', target.name, 'HP:', target.health)
    
    const finalDamage = Math.max(1, damage - target.defense)
    console.log('üí• –£—Ä–æ–Ω:', finalDamage)
    
    // –û–±–Ω–æ–≤–ª—è–µ–º HP –º–æ–±–∞
    const newMobs = [...combatState.currentMobs]
    newMobs[targetIndex] = {
      ...newMobs[targetIndex],
      health: Math.max(0, newMobs[targetIndex].health - finalDamage)
    }
    
    combatState.currentMobs = newMobs
    combatState.isPlayerTurn = false
    
    console.log('‚úÖ –ü–æ—Å–ª–µ –∞—Ç–∞–∫–∏:')
    console.log('–ú–æ–±—ã:', combatState.currentMobs.map(m => `${m.name}: ${m.health}/${m.maxHealth}`))
    console.log('–•–æ–¥ –∏–≥—Ä–æ–∫–∞:', combatState.isPlayerTurn)
  }
}

// –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–∞–∫–∏ –∫–æ–≥–¥–∞ –Ω–µ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞
console.log('\nüìù –¢–ï–°–¢ 2: –ü–æ–ø—ã—Ç–∫–∞ –∞—Ç–∞–∫–∏ –∫–æ–≥–¥–∞ –Ω–µ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞')
console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π:', {
  battleStarted,
  selectedSkillId,
  isPlayerTurn: combatState.isPlayerTurn
})

if (!battleStarted || !selectedSkillId || !combatState.isPlayerTurn) {
  console.log('‚ùå –ê—Ç–∞–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –Ω–µ —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞!')
} else {
  console.log('‚úÖ –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã')
}

// –¢–µ—Å—Ç 3: –•–æ–¥ –º–æ–±–æ–≤
console.log('\nüìù –¢–ï–°–¢ 3: –•–æ–¥ –º–æ–±–æ–≤')
setTimeout(() => {
  const aliveMobs = combatState.currentMobs.filter(mob => mob.health > 0)
  console.log('üîç –ñ–∏–≤—ã–µ –º–æ–±—ã:', aliveMobs.length)
  
  if (aliveMobs.length > 0) {
    let totalMobDamage = 0
    aliveMobs.forEach(mob => {
      const mobDamage = Math.max(1, Math.ceil(mob.attack - (10 * 0.5))) // character.defense = 10
      totalMobDamage += mobDamage
    })
    
    console.log('üí• –£—Ä–æ–Ω –º–æ–±–æ–≤:', totalMobDamage)
    
    combatState.currentHealth = Math.max(0, combatState.currentHealth - totalMobDamage)
    combatState.isPlayerTurn = true
    
    console.log('‚úÖ –ü–æ—Å–ª–µ —Ö–æ–¥–∞ –º–æ–±–æ–≤:')
    console.log('HP –∏–≥—Ä–æ–∫–∞:', combatState.currentHealth)
    console.log('–•–æ–¥ –∏–≥—Ä–æ–∫–∞:', combatState.isPlayerTurn)
  }
}, 100)

// –¢–µ—Å—Ç 4: –í—Ç–æ—Ä–∞—è –∞—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞
setTimeout(() => {
  console.log('\nüìù –¢–ï–°–¢ 4: –í—Ç–æ—Ä–∞—è –∞—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞')
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π:', {
    battleStarted,
    selectedSkillId,
    isPlayerTurn: combatState.isPlayerTurn
  })
  
  if (!battleStarted || !selectedSkillId || !combatState.isPlayerTurn) {
    console.log('‚ùå –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!')
  } else {
    console.log('‚úÖ –£—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ç–æ—Ä—É—é –∞—Ç–∞–∫—É')
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –∂–∏–≤–æ–≥–æ –º–æ–±–∞
    let targetIndex = -1
    for (let i = 0; i < combatState.currentMobs.length; i++) {
      if (combatState.currentMobs[i].health > 0) {
        targetIndex = i
        break
      }
    }
    
    console.log('üéØ –ò–Ω–¥–µ–∫—Å —Ü–µ–ª–∏:', targetIndex)
    
    if (targetIndex === -1) {
      console.log('‚ùå –ù–µ—Ç –∂–∏–≤—ã—Ö –º–æ–±–æ–≤!')
    } else {
      const target = combatState.currentMobs[targetIndex]
      console.log('üéØ –¶–µ–ª—å:', target.name, 'HP:', target.health)
      
      const finalDamage = Math.max(1, damage - target.defense)
      console.log('üí• –£—Ä–æ–Ω:', finalDamage)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º HP –º–æ–±–∞
      const newMobs = [...combatState.currentMobs]
      newMobs[targetIndex] = {
        ...newMobs[targetIndex],
        health: Math.max(0, newMobs[targetIndex].health - finalDamage)
      }
      
      combatState.currentMobs = newMobs
      combatState.isPlayerTurn = false
      
      console.log('‚úÖ –ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–π –∞—Ç–∞–∫–∏:')
      console.log('–ú–æ–±—ã:', combatState.currentMobs.map(m => `${m.name}: ${m.health}/${m.maxHealth}`))
      console.log('–•–æ–¥ –∏–≥—Ä–æ–∫–∞:', combatState.isPlayerTurn)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ—è
      const aliveMobs = combatState.currentMobs.filter(mob => mob.health > 0)
      console.log('üîç –ñ–∏–≤—ã–µ –º–æ–±—ã:', aliveMobs.length)
      
      if (aliveMobs.length === 0) {
        console.log('üéâ –ü–û–ë–ï–î–ê! –í—Å–µ –º–æ–±—ã —É–±–∏—Ç—ã!')
      } else {
        console.log('‚öîÔ∏è –ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...')
      }
    }
  }
}, 200)
