-- ============================================
-- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–û–í–û–ô –°–ò–°–¢–ï–ú–´ –ü–†–ï–î–ú–ï–¢–û–í
-- ============================================

-- –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
DROP FUNCTION IF EXISTS get_character_inventory(UUID);
DROP FUNCTION IF EXISTS get_character_equipment(UUID);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
CREATE OR REPLACE FUNCTION get_character_inventory(p_character_id UUID)
RETURNS JSON AS $$
DECLARE
    v_result JSON;
BEGIN
    SELECT json_agg(
        json_build_object(
            'slot_position', ci.slot_position,
            'stack_size', ci.stack_size,
            'quality', ci.quality,
            'actual_stats', ci.actual_stats,
            'value', ci.value,
            'item', json_build_object(
                'id', i.id,
                'name', i.name,
                'description', i.description,
                'icon', i.icon,
                'equipment_slot', i.equipment_slot,
                'grade_id', i.grade_id,
                'category_id', i.category_id,
                'subcategory_id', i.subcategory_id
            )
        )
    ) INTO v_result
    FROM character_inventory ci
    JOIN items_new i ON ci.item_id = i.id
    WHERE ci.character_id = p_character_id
    ORDER BY ci.slot_position;
    
    RETURN COALESCE(v_result, '[]'::json);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
CREATE OR REPLACE FUNCTION get_character_equipment(p_character_id UUID)
RETURNS JSON AS $$
DECLARE
    v_result JSON;
BEGIN
    SELECT json_agg(
        json_build_object(
            'slot_type', ce.slot_type,
            'quality', ce.quality,
            'actual_stats', ce.actual_stats,
            'value', ce.value,
            'equipped_at', ce.equipped_at,
            'item', json_build_object(
                'id', i.id,
                'name', i.name,
                'description', i.description,
                'icon', i.icon,
                'equipment_slot', i.equipment_slot,
                'grade_id', i.grade_id,
                'category_id', i.category_id,
                'subcategory_id', i.subcategory_id
            )
        )
    ) INTO v_result
    FROM character_equipment ce
    JOIN items_new i ON ce.item_id = i.id
    WHERE ce.character_id = p_character_id;
    
    RETURN COALESCE(v_result, '[]'::json);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
CREATE OR REPLACE FUNCTION equip_item(
    p_character_id UUID,
    p_item_id VARCHAR(50),
    p_slot_type VARCHAR(20)
)
RETURNS JSON AS $$
DECLARE
    v_item RECORD;
    v_equipment_slot VARCHAR(20);
    v_result JSON;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
    SELECT * INTO v_item
    FROM character_inventory ci
    JOIN items_new i ON ci.item_id = i.id
    WHERE ci.character_id = p_character_id 
    AND ci.item_id = p_item_id;
    
    IF NOT FOUND THEN
        RETURN json_build_object(
            'success', false,
            'error', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ'
        );
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
    IF v_item.equipment_slot != p_slot_type THEN
        RETURN json_build_object(
            'success', false,
            'error', '–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–ª–æ—Ç–∞'
        );
    END IF;
    
    -- –°–Ω–∏–º–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ª–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    DELETE FROM character_equipment 
    WHERE character_id = p_character_id 
    AND slot_type = p_slot_type;
    
    -- –≠–∫–∏–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
    INSERT INTO character_equipment (
        character_id, 
        item_id, 
        slot_type, 
        quality, 
        actual_stats, 
        value, 
        equipped_at
    ) VALUES (
        p_character_id, 
        p_item_id, 
        p_slot_type, 
        v_item.quality, 
        v_item.actual_stats, 
        v_item.value, 
        NOW()
    );
    
    -- –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    DELETE FROM character_inventory 
    WHERE character_id = p_character_id 
    AND item_id = p_item_id;
    
    RETURN json_build_object(
        'success', true,
        'item_name', v_item.name,
        'slot_type', p_slot_type
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object(
            'success', false,
            'error', '–û—à–∏–±–∫–∞ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏: ' || SQLERRM
        );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
CREATE OR REPLACE FUNCTION unequip_item(
    p_character_id UUID,
    p_slot_type VARCHAR(20)
)
RETURNS JSON AS $$
DECLARE
    v_item RECORD;
    v_free_slot INTEGER;
    v_result JSON;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
    SELECT * INTO v_item
    FROM character_equipment ce
    JOIN items_new i ON ce.item_id = i.id
    WHERE ce.character_id = p_character_id 
    AND ce.slot_type = p_slot_type;
    
    IF NOT FOUND THEN
        RETURN json_build_object(
            'success', false,
            'error', '–í —ç—Ç–æ–º —Å–ª–æ—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ'
        );
    END IF;
    
    -- –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    SELECT COALESCE(MAX(slot_position), 0) + 1 INTO v_free_slot
    FROM character_inventory 
    WHERE character_id = p_character_id;
    
    -- –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    INSERT INTO character_inventory (
        character_id, 
        item_id, 
        slot_position, 
        quality, 
        actual_stats, 
        value, 
        stack_size
    ) VALUES (
        p_character_id, 
        v_item.item_id, 
        v_free_slot, 
        v_item.quality, 
        v_item.actual_stats, 
        v_item.value, 
        1
    );
    
    -- –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    DELETE FROM character_equipment 
    WHERE character_id = p_character_id 
    AND slot_type = p_slot_type;
    
    RETURN json_build_object(
        'success', true,
        'item_name', v_item.name,
        'slot_position', v_free_slot
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object(
            'success', false,
            'error', '–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è: ' || SQLERRM
        );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
SELECT '=== –¢–ï–°–¢ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ===' as info;

-- –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
DO $$
DECLARE
    test_char_id UUID;
BEGIN
    -- –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    SELECT id INTO test_char_id FROM characters LIMIT 1;
    
    -- –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ
    IF test_char_id IS NULL THEN
        INSERT INTO characters (id, name, class, level) 
        VALUES (gen_random_uuid(), '–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂', 'warrior', 1)
        RETURNING id INTO test_char_id;
    END IF;
    
    -- –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    RAISE NOTICE '–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: %', test_char_id;
    
    -- –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    IF EXISTS (SELECT 1 FROM get_character_inventory(test_char_id) LIMIT 1) THEN
        RAISE NOTICE '‚úÖ –§—É–Ω–∫—Ü–∏—è get_character_inventory —Ä–∞–±–æ—Ç–∞–µ—Ç';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è get_character_inventory —Ä–∞–±–æ—Ç–∞–µ—Ç (–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç)';
    END IF;
    
    -- –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏  
    IF EXISTS (SELECT 1 FROM get_character_equipment(test_char_id) LIMIT 1) THEN
        RAISE NOTICE '‚úÖ –§—É–Ω–∫—Ü–∏—è get_character_equipment —Ä–∞–±–æ—Ç–∞–µ—Ç';
    ELSE
        RAISE NOTICE '‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏—è get_character_equipment —Ä–∞–±–æ—Ç–∞–µ—Ç (—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞ –ø—É—Å—Ç–∞)';
    END IF;
    
    RAISE NOTICE 'üéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!';
END $$;
